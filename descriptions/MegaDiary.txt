1. Describe the Problem

As a user
So that I can record my experiences
I want to keep a regular diary

As a user
So that I can reflect on my experiences
I want to read my past diary entries

As a user
So that I can reflect on my experiences in my busy day
I want to select diary entries to read based on how much time I have and my reading speed

As a user
So that I can keep track of my tasks
I want to keep a todo list along with my diary

As a user
So that I can keep track of my contacts
I want to see a list of all of the mobile phone numbers in all my diary entries

Remember that user stories don't map to classes 1:1. You'll need to digest the full problem and then develop a multi-class system that meets the user's needs.

    

2. Design the Class interface (PLANNED DESIGN VERSION)

Design a multi-class system, diagram out the classes and their relationships. Focus on important details, not completeness. Consider diagramming.


CLASS1 - Diary (imagine this like a physical book). 
    -Takes no arguments
    -Initialize with no instance variables
    -Method1 - Add ThoughtEntry to array (thoughts)
    -Method2 - Add TodoEntry to array (list)
    -Method3 - View Todo list (plus numbers)
    -Method4 - View list of past diary entries (plus numbers)
    -Method5 - View specific diary Entry text (plus numbers)
    -Method6 - Given 2x arguments, read_speed and has_time, return list of diary entries that can be read (plus numbers)
    -Method7 - Given 2x arguments, read_speed and has_time, return diary entry text of longest entry that can be read

Inludes ability to add, and various read options, thoughts, todo lists, phone numbers of contacts

CLASS2 - ThoughtEntry
    -Takes 2 arguments, day (string) and thought(string)
    -Initialize with 2x instance variables, @date and @thought
    -Method1, return reading time of thought given 2x arguments, read_speed and has_time  

CLASS3 - TodoEntry
    -Takes 1 argument (a string)
    -Initialize with 1x instance variable, @task
    -Method1, mark task as done
    -Method2, mark task as not done if done
    -Method3, check status of task done or not done (boolean)


CLASS4 - ContactEntry
    - Takes 2 arguments, name as string and phone number as integer
    - Initialize with 2x instance variables, @name and @number, which will also be made attr_accessor (is this needed?)
    - Method1 - make @name and @number into a hash for printing out with 'all diary entries'
    NOTE no explicit reference to the below methods being needed in the specs file, just for fun
    - Method2 - edit number
    - Method3 - edit name




    The design of each class initializer and the parameters it takes.
    
    The design of each class' public methods, including:
        Their names and purposes
        What parameters they take and the data types.
        What they return and that data type
        Any other side effects they might have
    

3. Create Examples as Tests

    INTEGRATION TESTS: Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

    UNIT TESTS: Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

4. Implement the Behaviour

    After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

