1. Describe the Problem

    Put or write the user story here. Add any clarifying notes you might have.

    

2. Design the Class interface (PLANNED DESIGN VERSION)

Design a multi-class system, diagram out the classes and their relationships. Focus on important details, not completeness. Consider diagramming.

┌────────────────────────────┐
│ MusicPlayer                │
│                            │
│ - add(track)               │
│ - all                      │
│ - search_by_title(keyword) │
│   => [tracks...]           │
└───────────┬────────────────┘
            │
            │ owns a list of
            ▼
┌─────────────────────────┐
│ Track(title, artist)    │
│                         │
│ - title                 │
│ - artist                │
│ - format                │
│   => "TITLE by ARTIST"  │
└─────────────────────────┘


    The design of each class initializer and the parameters it takes.
    
    The design of each class' public methods, including:
        Their names and purposes
        What parameters they take and the data types.
        What they return and that data type
        Any other side effects they might have
    

3. Create Examples as Tests

    INTEGRATION TESTS: Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

    UNIT TESTS: Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

4. Implement the Behaviour

    After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

